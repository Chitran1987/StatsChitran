// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// is_prime
LogicalVector is_prime(NumericVector x);
RcppExport SEXP _StatsChitran_is_prime(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_prime(x));
    return rcpp_result_gen;
END_RCPP
}
// is_prime_large
IntegerVector is_prime_large(NumericVector X);
RcppExport SEXP _StatsChitran_is_prime_large(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(is_prime_large(X));
    return rcpp_result_gen;
END_RCPP
}
// is_prime_par
IntegerVector is_prime_par(int N);
RcppExport SEXP _StatsChitran_is_prime_par(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(is_prime_par(N));
    return rcpp_result_gen;
END_RCPP
}
// movavg_cpp
NumericVector movavg_cpp(NumericVector Y, size_t bn, size_t fn, size_t ord);
RcppExport SEXP _StatsChitran_movavg_cpp(SEXP YSEXP, SEXP bnSEXP, SEXP fnSEXP, SEXP ordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< size_t >::type bn(bnSEXP);
    Rcpp::traits::input_parameter< size_t >::type fn(fnSEXP);
    Rcpp::traits::input_parameter< size_t >::type ord(ordSEXP);
    rcpp_result_gen = Rcpp::wrap(movavg_cpp(Y, bn, fn, ord));
    return rcpp_result_gen;
END_RCPP
}
// prime_firstN
NumericVector prime_firstN(int n);
RcppExport SEXP _StatsChitran_prime_firstN(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(prime_firstN(n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StatsChitran_is_prime", (DL_FUNC) &_StatsChitran_is_prime, 1},
    {"_StatsChitran_is_prime_large", (DL_FUNC) &_StatsChitran_is_prime_large, 1},
    {"_StatsChitran_is_prime_par", (DL_FUNC) &_StatsChitran_is_prime_par, 1},
    {"_StatsChitran_movavg_cpp", (DL_FUNC) &_StatsChitran_movavg_cpp, 4},
    {"_StatsChitran_prime_firstN", (DL_FUNC) &_StatsChitran_prime_firstN, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_StatsChitran(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
